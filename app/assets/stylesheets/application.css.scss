/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
 * or any plugin's vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any styles
 * defined in the other CSS/SCSS files in this directory. It is generally better to create a new
 * file per style scope.
 *
 *= require_tree .
 *= require_self
 *= require foundation_and_overrides

 */

@import "foundation";
@import "foundation_and_overrides";

@mixin word-wrap() {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

@font-face {
	font-family: 'Aaargh';
	src:font-url('Aaargh-webfont.eot');
	src:font-url('Aaargh-webfont.eot?iefix') format('eot'),
		font-url('Aaargh-webfont.woff') format('woff'),
		font-url('Aaargh-webfont.ttf') format('truetype'),
		font-url('Aaargh-webfont.svg#webfont') format('svg');
}

@font-face {
	font-family: 'DroidSerif';
	src:font-url('DroidSerif-Regular-webfont.eot');
	src:font-url('DroidSerif-Regular-webfont.eot?iefix') format('eot'),
		font-url('DroidSerif-Regular-webfont.woff') format('woff'),
		font-url('DroidSerif-Regular-webfont.ttf') format('truetype'),
		font-url('DroidSerif-Regular-webfont.svg#webfont') format('svg');
}

/// Test if value is a valid direction for the gradient mixin
@function is-direction($value) {
	$is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

	@return $is-keyword or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

/// Gradient mixin
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: $direction, $color-stops;
		$direction: 180deg;
	}

	background: nth(ngth($color-stops,1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradeint($direction, $color-stops);
}

.container,
body > header,
body > footer,
main {
	@include flex-grid-row($width: 95%);
	padding-top: 1em;
}

.container,
body > header,
body > footer {
	@include flex-grid-row-align(center);
}

body {
	@include linear-gradient(to top, $s-green4, $s-green1);
	background-repeat: no-repeat;
	background-attachment: fixed;
}

secthead {
	@include flex-grid-row($width: 100%);
	font-size: 1em;
	line-height: 1.4;
	color: white;
	font-weight: 300;
	@include linear-gradient(to right, $s-purp3, $s-purp5);
	padding-left: 2em;
	padding-top: 2em;
	padding-bottom: 2em;
}

secthead > h1 {
	font-family: 'Helvetica-Neue', Helvetica, sans-serif;
	font-size: 7em;
	font-weight: 100;
	line-height: 1.1;
}

secthead > h3 {
	font-family: 'Helvetica-Neue', Helvetica, sans-serif;
	font-size: 4em;
	font-weight: 100;
	line-height: 1.1;
}

secthead > h4 {
	font-family: 'Aaargh', 'Helvetica-Neue', Helvetica, sans-serif;
	font-size: 2em;
	font-weight: 200;
	line-height: 1.1;

}

main > h3 {
	font-family: 'Helvetica-Neue', Helvetica, sans-serif;
	color: $cyanish;
	font-size: 2.5em;
	font-weight: 200;
	line-height: 1.4;
}

main > div > h4 {
	font-family: 'Helvetica-Neue', Helvetica, sans-serif;
	color: $cyanish;
	font-size: 1.8em;
	font-weight: 200;
	line-height: 1.4;	
}

main > article {
	background-color: white;
	outline-color: $s-purp5;
	outline-style: ridge;	
	@media #{$medium-up} {
		@include flex-grid-column(8);
		@include flex-grid-order(2);
	}
	@include flex-grid-column(12);
	@include flex-grid-order(0);
}

main > fullarticle {
	background-color: white;
	outline-color: $s-purp5;
	outline-style: ridge;
	@include flex-grid-column(12);
}

main > aside {
	background-color: white;
	outline-color: $s-purp5;
	outline-style: ridge;
	@media #{$medium-up} {
		@include flex-grid-column(3);
		@include flex-grid-order(0);
	}
	@include flex-grid-column(12);
	@include flex-grid-order(1);
}
main > emp {
	@include flex-grid-column(1);
	@include show-for(medium);
	@include flex-grid-order(1);
}
main > p {
	@include flex-grid-row(nest);
	@include flex-grid-column(12);
}
main > shade {
	@include flex-grid-row(nest);
	@include flex-grid-column(12);
	font-size: 2.5em;
	font-weight: 400;
	color: $s-purp4;
	-webkit-text-fill-color: $s-purp2; /* Will override color (regardless of order) */
    -webkit-text-stroke-width: 1px;
    -webkit-text-stroke-color: $s-purp4;
}

main > table {
	outline-style: solid;
	border-color: black;
}

img {
	max-width: 70%;
}

#name_main {
	background-color: white;
	outline-style: ridge;
	outline-color: $s-purp3;
	padding: 1em;
}

#name_main > img {
	max-width: 30%;
}

#name_main > h3, #name_main > h4 {
	color: $s-yell4;
}

.top-bar {
	font-size: 0.8em;
}

.welcome {
	@include linear-gradient(to right, $med-blue-purple, $grad-purple);
	color: white;

}

.top-bar {
	font-family: 'Helvetica-Neue', Helvetica, sans-serif;
	font-weight: 200;
}

.menu-text {
	font-family: 'Helvetica-Neue', Helvetica, sans-serif;
	font-weight: 600;
}

p {
	@include flex-grid-row(nest);
	@include flex-grid-column(12);
	font-family: DroidSerif;
}

line {
	@include flex-grid-row();
	@include flex-grid-column(12);
	font-family: DroidSerif;
}

line > key {
	@include flex-grid-column(4);
}

line > val {
	@include flex-grid-column(8);
}

main {
	padding-top: 1em;
	padding-bottom: 1em;
}

sidebox {
	@include flex-grid-row();
	@include flex-grid-column(11);
	@include flex-grid-row-align(spaced);
	font-family: DroidSerif;
	color: $grad-purple;
	background-color: $s-purp1;
	outline-color: $s-purp5;
	outline-style: ridge;
	box-shadow: 0.8em 0.8em 0.4em $s-purp5;
	text-align: center;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 1em;
	padding-bottom: 1em;
}

sidebox > p {
	font-size: 0.8em;
}

sidebox > h5 {
	text-align: center;
}

.highlight {
	font-size: 0.9em;
	line-height: 1.85em;
}

a {
	white-space: nowrap;
}

.ruby {
	@extends .highlight;
}

.erb {
	@extends .highlight;
}